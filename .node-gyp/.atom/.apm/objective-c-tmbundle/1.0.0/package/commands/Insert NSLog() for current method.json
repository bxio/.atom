{
  "beforeRunningCommand": "nop",
  "command": "#!/usr/bin/env ruby\n\nproto_re = /\n            ^\\s*                # Start of the line and optional space\n            [+-]\\s*             # a plus or minus for method specifier\n            \\([^)]+\\)           # the return type in brackets\n            ((?:\\n|[^@{])*)     \n            (?m:[\\s;]*)         \n            \\{                  \n          /x\n\nprevious_lines  = STDIN.readlines[1..ENV['TM_LINE_NUMBER'].to_i - 1]\ninvocation_line = previous_lines[-1]\n\nproto = previous_lines.join.scan(proto_re)[-1]\n\nexit if proto.nil? or proto.empty?\n\nlast_proto_sel_with_types = proto[0].strip.sub(/^\\s+/, '').sub(%r{\\s*//.*$}, '').gsub(/\\n\\s*/, ' ')\n\nparams = []\nparams = last_proto_sel_with_types.scan(/(.+?)\\s*:\\s*\\((.+?)\\)\\s*(\\w+)/)\n\ndef format_specifier_for_type(type)\n  type = type.gsub(/\\s*const\\s*/, '')\n  %w[int bool BOOL long NSInteger NSUInteger size_t].each { |t| return('%d') if type.include? t }\n  %w[float double CGFloat].each { |t| return('%f') if type.include? t }\n  return '%c' if type == 'char'\n  return '%C' if type == 'unichar'\n  return '%s' if type.include?('char*') || type.include?('string')\n  '%@'\nend\n\ndef transformer_for(type, name)\n  case type\n  when 'NSRect':  \"NSStringFromRect(#{name})\"\n  when 'NSRange': \"NSStringFromRange(#{name})\"\n  when 'NSPoint': \"NSStringFromPoint(#{name})\"\n  when 'NSSize':  \"NSStringFromSize(#{name})\"\n  when 'SEL':     \"NSStringFromSelector(#{name})\"\n  when /string/:  \"#{name}.c_str()\"\n  else name\n  end\nend\n\nprint 'NSLog(@\"[%@ '\nif params.empty?\n  print last_proto_sel_with_types\nelse\n  print params.map { |param, type, name| param + ':' + format_specifier_for_type(type) }.join\nend\nprint ']\", [self class]'\nprint ', ' + params.map { |param, type, name| transformer_for(type, name) }.join(', ') unless params.empty?\nprint \");\"\n",
  "input": "document",
  "name": "Insert NSLog() for Current Method",
  "output": "insertAsSnippet",
  "scope": "source.objc meta.scope.implementation, source.objc++ meta.scope.implementation",
  "tabTrigger": "logm",
  "uuid": "C5624A26-E661-46EE-AA6A-14E6B678CFF9"
}
