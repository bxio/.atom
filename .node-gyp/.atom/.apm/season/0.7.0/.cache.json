{"name":"season","version":"0.7.0","description":"CSON utilities","licenses":[{"type":"MIT","url":"http://github.com/atom/season/raw/master/LICENSE.md"}],"main":"./lib/cson.js","bin":{"csonc":"./bin/csonc"},"scripts":{"prepublish":"grunt coffee","test":"jasmine-focused --captureExceptions --coffee spec/"},"repository":{"type":"git","url":"https://github.com/atom/season.git"},"bugs":{"url":"https://github.com/atom/season/issues"},"keywords":["cson","json"],"dependencies":{"underscore":"~1.4.4","coffee-script":"~1.6.2","optimist":"~0.4.0"},"devDependencies":{"jasmine-focused":"~0.1.0","grunt-contrib-coffee":"~0.7.0","grunt-cli":"~0.1.8","grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-coffeelint":"0.0.6","temp":"~0.5.0","rimraf":"~2.1.4"},"readme":"# season - CSON Node module [![Build Status](https://travis-ci.org/atom/season.png)](https://travis-ci.org/atom/season)\n\nRead and write CSON/JSON files seamlessly.\n\n## Installing\n\n```sh\nnpm install season\n```\n\n## Building\n  * Clone the repository\n  * Run `npm install`\n  * Run `grunt` to compile the CoffeeScript code\n  * Run `grunt test` to run the specs\n\n## Compiling CSON to JSON\n\nThis module comes with a `csonc` executable that allows you to compile a CSON\nfile to JSON.\n\nTo use:\n\n```sh\nnpm install -g season\necho \"this: 'is cson'\" > file.cson\ncsonc file.cson file.json\ncat file.json\n{\n  \"this\": \"is cson\"\n}\n```\n\n## Docs\n\n```coffeescript\nCSON = require 'season'\n```\n\n### CSON.stringify(object)\n\nConvert the object to a CSON string.\n\n`object` - The object to convert to CSON.\n\nReturns the CSON string representation of the given object.\n\n### CSON.readFile(objectPath, callback)\n\nRead the CSON or JSON object at the given path and return it to the callback\nonce it is read and parsed.\n\n`objectPath` - The string path to a JSON or CSON object file.\n\n`callback` - The callback to call with the error or object once the path\n             is read and parsed.\n\n### CSON.writeFileSync(objectPath, object)\n\nWrite the object to the given path as either JSON or CSON depending on the\npath's extension.\n\n`objectPath` - The string path to a JSON or CSON object file.\n\n`object` - The object to convert to a string and write to the path.\n\n### CSON.isObjectPath(objectPath)\n\nIs the given path a valid object path?\n\nReturns `true` if the path has a `.json` or `.cson` file extension, `false`\notherwise.\n\n### CSON.resolve(objectPath)\n\nResolve the path to an existent file that has a `.json` or `.cson` extension.\n\n`objectPath` - The string path to a JSON or CSON object file with or without\n               an extension.\n\nReturns the path to an existent CSON or JSON file or `null` if none found.\n","readmeFilename":"README.md","_id":"season@0.7.0","dist":{"shasum":"3d0dcaee90876426ff07cd788bab3d669ff9e5bd","tarball":"http://registry.npmjs.org/season/-/season-0.7.0.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"kevinsawicki","email":"kevinsawicki@gmail.com"},"maintainers":[{"name":"kevinsawicki","email":"kevinsawicki@gmail.com"}],"directories":{},"_etag":"\"6BZDXL5P4HLDB15Q76GFIH7L4\""}