{"_id":"isbinaryfile","_rev":"25-5b648cebd450bc885c35d6343a7268f7","name":"isbinaryfile","description":"Detects if a file is binary in Node.js. Similar to Perl's -B.","dist-tags":{"latest":"0.1.9"},"versions":{"0.1.0":{"name":"isbinaryfile","version":"0.1.0","description":"Detects if a file is binary in Node.js. Similar to Perl's -B.","main":"./lib/panino.js","engines":{"node":">=0.6.0"},"maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"repository":{"type":"git","url":"https://github.com/gjtorikian/isBinaryFile"},"readme":"isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n\n* it reads the first few bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nPlease make sure the file exists before calling this function.\n\n## Installation\n\n```\nnpm install isBinaryFile\n```\n\n## Usage\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nif (isBinaryFile(process.argv[2]))\n\tconsole.log(\"It is!\")\nelse\n\tconsole.log(\"No.\")\n```\n\nTa da.","_id":"isbinaryfile@0.1.0","dist":{"shasum":"de84b10537354175ed3c23f407d2725ff9188659","tarball":"http://registry.npmjs.org/isbinaryfile/-/isbinaryfile-0.1.0.tgz"},"directories":{}},"0.1.1":{"name":"isbinaryfile","version":"0.1.1","description":"Detects if a file is binary in Node.js. Similar to Perl's -B.","main":"./lib/panino.js","engines":{"node":">=0.6.0"},"maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"repository":{"type":"git","url":"https://github.com/gjtorikian/isBinaryFile"},"readme":"isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n\n* it reads the first few bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nPlease make sure the file exists before calling this function.\n\n## Installation\n\n```\nnpm install isBinaryFile\n```\n\n## Usage\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nif (isBinaryFile(process.argv[2]))\n\tconsole.log(\"It is!\")\nelse\n\tconsole.log(\"No.\")\n```\n\nTa da. If you've already `stat()`-ed a file, you can pass the stat's `size` info in to save time:\n\n```javascript\nvar stat = lstatSync(process.argv[2])\nvar isBF = isBinaryFile(process.argv[2], stat.size());\n```","_id":"isbinaryfile@0.1.1","dist":{"shasum":"b450f748a85ec9dc60d2d0c27375203beb356a36","tarball":"http://registry.npmjs.org/isbinaryfile/-/isbinaryfile-0.1.1.tgz"},"directories":{}},"0.1.2":{"name":"isbinaryfile","version":"0.1.2","description":"Detects if a file is binary in Node.js. Similar to Perl's -B.","main":"./lib/panino.js","engines":{"node":">=0.6.0"},"maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"repository":{"type":"git","url":"https://github.com/gjtorikian/isBinaryFile"},"readme":"isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n\n* it reads the first few thousand bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nPlease make sure the file exists before calling this function.\n\n## Installation\n\n```\nnpm install isBinaryFile\n```\n\n## Usage\n\nIf you pass in one argument, this module assumes it's just the file path, and performs the appropriate file read and stat functionality internally:\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nif (isBinaryFile(process.argv[2]))\n\tconsole.log(\"It is!\")\nelse\n\tconsole.log(\"No.\")\n```\n\nTa da. \n\n\nHowever, if you've already `stat()`-ed a file, you can pass in both the file's raw data and the stat's `size` info to save time:\n\n```javascript\nfs.readFile(process.argv[2], function(err, data) {\n\tfs.lstat(process.argv[2], function(err, stat) {\n\t\tif (isBinaryFile(data, stat))\n\t\t\tconsole.log(\"It is!\")\n\t\telse\n\t\t\tconsole.log(\"No.\")\n\t});\n});\n```","_id":"isbinaryfile@0.1.2","dist":{"shasum":"025635767652d7b930c72465ba81a435999352fd","tarball":"http://registry.npmjs.org/isbinaryfile/-/isbinaryfile-0.1.2.tgz"},"directories":{}},"0.1.3":{"name":"isbinaryfile","version":"0.1.3","description":"Detects if a file is binary in Node.js. Similar to Perl's -B.","main":"./lib/panino.js","engines":{"node":">=0.6.0"},"maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"repository":{"type":"git","url":"https://github.com/gjtorikian/isBinaryFile"},"readme":"isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n\n* it reads the first few thousand bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nIt's also pretty much taken from [ag](https://github.com/ggreer/the_silver_searcher).\n\nNote: please make sure the file exists before calling this function.\n\n## Installation\n\n```\nnpm install isBinaryFile\n```\n\n## Usage\n\nIf you pass in one argument, this module assumes it's just the file path, and performs the appropriate file read and stat functionality internally:\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nif (isBinaryFile(process.argv[2]))\n\tconsole.log(\"It is!\")\nelse\n\tconsole.log(\"No.\")\n```\n\nTa da. \n\n\nHowever, if you've already `stat()`-ed a file, you can pass in both the file's raw data and the stat's `size` info to save time:\n\n```javascript\nfs.readFile(process.argv[2], function(err, data) {\n\tfs.lstat(process.argv[2], function(err, stat) {\n\t\tif (isBinaryFile(data, stat))\n\t\t\tconsole.log(\"It is!\")\n\t\telse\n\t\t\tconsole.log(\"No.\")\n\t});\n});\n```","_id":"isbinaryfile@0.1.3","dist":{"shasum":"6a7bc68b730d8a90416c1d63db5ea85ba58820a6","tarball":"http://registry.npmjs.org/isbinaryfile/-/isbinaryfile-0.1.3.tgz"},"directories":{}},"0.1.4":{"name":"isbinaryfile","version":"0.1.4","description":"Detects if a file is binary in Node.js. Similar to Perl's -B.","main":"./lib/panino.js","engines":{"node":">=0.6.0"},"maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"repository":{"type":"git","url":"https://github.com/gjtorikian/isBinaryFile"},"devDependencies":{"mocha":""},"readme":"isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n\n* it reads the first few thousand bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nAll the logic is also pretty much ported from [ag](https://github.com/ggreer/the_silver_searcher).\n\nNote: please make sure the file exists before calling this function.\n\n## Installation\n\n```\nnpm install isBinaryFile\n```\n\n## Usage\n\nIf you pass in one argument, this module assumes it's just the file path, and performs the appropriate file read and stat functionality internally:\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nif (isBinaryFile(process.argv[2]))\n\tconsole.log(\"It is!\")\nelse\n\tconsole.log(\"No.\")\n```\n\nTa da. \n\n\nHowever, if you've already read and `stat()`-ed a file (for some other reason), you can pass in both the file's raw data and the stat's `size` info to save time:\n\n```javascript\nfs.readFile(process.argv[2], function(err, data) {\n\tfs.lstat(process.argv[2], function(err, stat) {\n\t\tif (isBinaryFile(data, stat))\n\t\t\tconsole.log(\"It is!\")\n\t\telse\n\t\t\tconsole.log(\"No.\")\n\t});\n});\n```\n\n## Testing\n\nInstall mocha on your machine:\n\n```\nnpm install mocha -g\n```\n\nThen go into the _tests_ directory, and type `mocha test.js`.","readmeFilename":"README.md","_id":"isbinaryfile@0.1.4","dist":{"shasum":"c43289f6030b04a7123374c970f3749e9b94c096","tarball":"http://registry.npmjs.org/isbinaryfile/-/isbinaryfile-0.1.4.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"gjtorikian","email":"gjtorikian@gmail.com"},"directories":{}},"0.1.5":{"name":"isbinaryfile","version":"0.1.5","description":"Detects if a file is binary in Node.js. Similar to Perl's -B.","main":"./lib/panino.js","engines":{"node":">=0.6.0"},"maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"repository":{"type":"git","url":"https://github.com/gjtorikian/isBinaryFile"},"devDependencies":{"mocha":""},"readme":"isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n\n* it reads the first few thousand bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nAll the logic is also pretty much ported from [ag](https://github.com/ggreer/the_silver_searcher).\n\nNote: if the file doesn't exist or it is empty, this function returns `false`.\n\n## Installation\n\n```\nnpm install isBinaryFile\n```\n\n## Usage\n\nIf you pass in one argument, this module assumes it's just the file path, and performs the appropriate file read and stat functionality internally:\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nif (isBinaryFile(process.argv[2]))\n\tconsole.log(\"It is!\")\nelse\n\tconsole.log(\"No.\")\n```\n\nTa da. \n\n\nHowever, if you've already read and `stat()`-ed a file (for some other reason), you can pass in both the file's raw data and the stat's `size` info to save time:\n\n```javascript\nfs.readFile(process.argv[2], function(err, data) {\n\tfs.lstat(process.argv[2], function(err, stat) {\n\t\tif (isBinaryFile(data, stat))\n\t\t\tconsole.log(\"It is!\")\n\t\telse\n\t\t\tconsole.log(\"No.\")\n\t});\n});\n```\n\n## Testing\n\nInstall mocha on your machine:\n\n```\nnpm install mocha -g\n```\n\nThen go into the _tests_ directory, and type `mocha test.js`.\n","readmeFilename":"README.md","_id":"isbinaryfile@0.1.5","dist":{"shasum":"a6f7c9ff8648079b400eb18a76f4f8a0c9a3439c","tarball":"http://registry.npmjs.org/isbinaryfile/-/isbinaryfile-0.1.5.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"gjtorikian","email":"gjtorikian@gmail.com"},"directories":{}},"0.1.6":{"name":"isbinaryfile","version":"0.1.6","description":"Detects if a file is binary in Node.js. Similar to Perl's -B.","main":"./lib/panino.js","engines":{"node":">=0.6.0"},"maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"repository":{"type":"git","url":"https://github.com/gjtorikian/isBinaryFile"},"devDependencies":{"mocha":""},"readme":"isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n\n* it reads the first few thousand bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nAll the logic is also pretty much ported from [ag](https://github.com/ggreer/the_silver_searcher).\n\nNote: if the file doesn't exist or it is empty, this function returns `false`.\n\n## Installation\n\n```\nnpm install isBinaryFile\n```\n\n## Usage\n\nIf you pass in one argument, this module assumes it's just the file path, and performs the appropriate file read and stat functionality internally:\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nif (isBinaryFile(process.argv[2]))\n\tconsole.log(\"It is!\")\nelse\n\tconsole.log(\"No.\")\n```\n\nTa da. \n\n\nHowever, if you've already read and `stat()`-ed a file (for some other reason), you can pass in both the file's raw data and the stat's `size` info to save time:\n\n```javascript\nfs.readFile(process.argv[2], function(err, data) {\n\tfs.lstat(process.argv[2], function(err, stat) {\n\t\tif (isBinaryFile(data, stat))\n\t\t\tconsole.log(\"It is!\")\n\t\telse\n\t\t\tconsole.log(\"No.\")\n\t});\n});\n```\n\n## Testing\n\nInstall mocha on your machine:\n\n```\nnpm install mocha -g\n```\n\nThen go into the _tests_ directory, and type `mocha test.js`.\n","_id":"isbinaryfile@0.1.6","dist":{"shasum":"482f45ebff3397de48525deadcc7cb1c98e2350d","tarball":"http://registry.npmjs.org/isbinaryfile/-/isbinaryfile-0.1.6.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"gjtorikian","email":"gjtorikian@gmail.com"},"directories":{}},"0.1.7":{"name":"isbinaryfile","version":"0.1.7","description":"Detects if a file is binary in Node.js. Similar to Perl's -B.","main":"./lib/panino.js","engines":{"node":">=0.6.0"},"maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"repository":{"type":"git","url":"https://github.com/gjtorikian/isBinaryFile"},"devDependencies":{"mocha":""},"scripts":{"test":"mocha tests/test.js"},"readme":"isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n\n* it reads the first few thousand bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nAll the logic is also pretty much ported from [ag](https://github.com/ggreer/the_silver_searcher).\n\nNote: if the file doesn't exist or it is empty, this function returns `false`.\n\n## Installation\n\n```\nnpm install isBinaryFile\n```\n\n## Usage\n\nIf you pass in one argument, this module assumes it's just the file path, and performs the appropriate file read and stat functionality internally:\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nif (isBinaryFile(process.argv[2]))\n\tconsole.log(\"It is!\")\nelse\n\tconsole.log(\"No.\")\n```\n\nTa da. \n\n\nHowever, if you've already read and `stat()`-ed a file (for some other reason), you can pass in both the file's raw data and the stat's `size` info to save time:\n\n```javascript\nfs.readFile(process.argv[2], function(err, data) {\n\tfs.lstat(process.argv[2], function(err, stat) {\n\t\tif (isBinaryFile(data, stat))\n\t\t\tconsole.log(\"It is!\")\n\t\telse\n\t\t\tconsole.log(\"No.\")\n\t});\n});\n```\n\n## Testing\n\nInstall mocha on your machine:\n\n```\nnpm install mocha -g\n```\n\nThen go into the _tests_ directory, and type `mocha test.js`.\n","_id":"isbinaryfile@0.1.7","dist":{"shasum":"78cffef7e0a4f0cf3a83c86cc5c122d8fe1d458e","tarball":"http://registry.npmjs.org/isbinaryfile/-/isbinaryfile-0.1.7.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"gjtorikian","email":"gjtorikian@gmail.com"},"directories":{}},"0.1.8":{"name":"isbinaryfile","version":"0.1.8","description":"Detects if a file is binary in Node.js. Similar to Perl's -B.","main":"./lib/panino.js","engines":{"node":">=0.6.0"},"maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"repository":{"type":"git","url":"https://github.com/gjtorikian/isBinaryFile"},"devDependencies":{"mocha":""},"scripts":{"test":"mocha tests/test.js"},"readme":"isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n\n* it reads the first few thousand bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nAll the logic is also pretty much ported from [ag](https://github.com/ggreer/the_silver_searcher).\n\nNote: if the file doesn't exist or it is empty, this function returns `false`.\n\n## Installation\n\n```\nnpm install isBinaryFile\n```\n\n## Usage\n\nIf you pass in one argument, this module assumes it's just the file path, and performs the appropriate file read and stat functionality internally:\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nif (isBinaryFile(process.argv[2]))\n\tconsole.log(\"It is!\")\nelse\n\tconsole.log(\"No.\")\n```\n\nTa da. \n\n\nHowever, if you've already read and `stat()`-ed a file (for some other reason), you can pass in both the file's raw data and the stat's `size` info to save time:\n\n```javascript\nfs.readFile(process.argv[2], function(err, data) {\n\tfs.lstat(process.argv[2], function(err, stat) {\n\t\tif (isBinaryFile(data, stat))\n\t\t\tconsole.log(\"It is!\")\n\t\telse\n\t\t\tconsole.log(\"No.\")\n\t});\n});\n```\n\n## Testing\n\nInstall mocha on your machine:\n\n```\nnpm install mocha -g\n```\n\nThen go into the _tests_ directory, and type `mocha test.js`.\n","_id":"isbinaryfile@0.1.8","dist":{"shasum":"82ee8bae6634bad5be4accae9ceb70a34a4be5b0","tarball":"http://registry.npmjs.org/isbinaryfile/-/isbinaryfile-0.1.8.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"gjtorikian","email":"gjtorikian@gmail.com"},"directories":{}},"0.1.9":{"name":"isbinaryfile","version":"0.1.9","description":"Detects if a file is binary in Node.js. Similar to Perl's -B.","main":"./lib/panino.js","engines":{"node":">=0.6.0"},"maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"repository":{"type":"git","url":"https://github.com/gjtorikian/isBinaryFile"},"devDependencies":{"mocha":""},"scripts":{"test":"mocha tests/test.js"},"readme":"isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n\n* it reads the first few thousand bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nAll the logic is also pretty much ported from [ag](https://github.com/ggreer/the_silver_searcher).\n\nNote: if the file doesn't exist or it is empty, this function returns `false`.\n\n## Installation\n\n```\nnpm install isBinaryFile\n```\n\n## Usage\n\nIf you pass in one argument, this module assumes it's just the file path, and performs the appropriate file read and stat functionality internally:\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nif (isBinaryFile(process.argv[2]))\n\tconsole.log(\"It is!\")\nelse\n\tconsole.log(\"No.\")\n```\n\nTa da. \n\n\nHowever, if you've already read and `stat()`-ed a file (for some other reason), you can pass in both the file's raw data and the stat's `size` info to save time:\n\n```javascript\nfs.readFile(process.argv[2], function(err, data) {\n\tfs.lstat(process.argv[2], function(err, stat) {\n\t\tif (isBinaryFile(data, stat))\n\t\t\tconsole.log(\"It is!\")\n\t\telse\n\t\t\tconsole.log(\"No.\")\n\t});\n});\n```\n\n## Testing\n\nInstall mocha on your machine:\n\n```\nnpm install mocha -g\n```\n\nThen go into the _tests_ directory, and type `mocha test.js`.\n","readmeFilename":"README.md","_id":"isbinaryfile@0.1.9","dist":{"shasum":"15eece35c4ab708d8924da99fb874f2b5cc0b6c4","tarball":"http://registry.npmjs.org/isbinaryfile/-/isbinaryfile-0.1.9.tgz"},"_from":".","_npmVersion":"1.2.17","_npmUser":{"name":"gjtorikian","email":"gjtorikian@gmail.com"},"directories":{}}},"readme":"isBinaryFile\n============\n\nDetects if a file is binary in Node.js. Similar to [Perl's `-B` switch](http://stackoverflow.com/questions/899206/how-does-perl-know-a-file-is-binary), in that:\n\n* it reads the first few bytes of a file\n* checks for a `null` byte; if it's found, it's binary\n* flags non-ASCII characters. After a certain number of \"weird\" characters, the file is flagged as binary\n\nPlease make sure the file exists before calling this function.\n\n## Installation\n\n```\nnpm install isBinaryFile\n```\n\n## Usage\n\n```javascript\nvar isBinaryFile = require(\"isbinaryfile\");\n\nif (isBinaryFile(process.argv[2]))\n\tconsole.log(\"It is!\")\nelse\n\tconsole.log(\"No.\")\n```\n\nTa da.","maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"time":{"0.1.0":"2012-10-09T05:40:12.609Z","0.1.1":"2012-10-14T18:17:33.729Z","0.1.2":"2012-10-15T20:29:48.898Z","0.1.3":"2012-10-26T05:12:53.570Z","0.1.4":"2012-11-08T17:32:51.454Z","0.1.5":"2012-12-24T10:10:38.979Z","0.1.6":"2013-03-13T07:15:56.885Z","0.1.7":"2013-03-19T02:16:31.881Z","0.1.8":"2013-03-19T17:47:00.807Z","0.1.9":"2013-05-24T21:32:05.109Z"},"repository":{"type":"git","url":"https://github.com/gjtorikian/isBinaryFile"},"_attachments":{"isbinaryfile-0.1.9.tgz":{"content_type":"application/octet-stream","revpos":24,"digest":"md5-h4SoSw6J3eBUN79Bsq2YZg==","length":47469,"stub":true},"isbinaryfile-0.1.8.tgz":{"content_type":"application/octet-stream","revpos":23,"digest":"md5-iJ1usnTAw63/++y1wOnDhA==","length":47409,"stub":true},"isbinaryfile-0.1.7.tgz":{"content_type":"application/octet-stream","revpos":21,"digest":"md5-9iaUh6IT3TfKtdvCjkLAWw==","length":47402,"stub":true},"isbinaryfile-0.1.6.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-D3XK62PME5zkhMwngxsnaw==","length":47361,"stub":true},"isbinaryfile-0.1.5.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-yCJgSnq74JP5QOI801SfgA==","length":47401,"stub":true},"isbinaryfile-0.1.4.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-/aq5QbL/gZKfSALVTR+Awg==","length":47383,"stub":true},"isbinaryfile-0.1.3.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-uw08IcIeoVgtIWEOpFrnMQ==","length":1488,"stub":true},"isbinaryfile-0.1.2.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-FqSM3ciOeN0JkaWKFdIeJQ==","length":1504,"stub":true},"isbinaryfile-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-E6uVBNPeBQH7u/G/8PIimA==","length":1349,"stub":true},"isbinaryfile-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-OlLQi9Oa2bHbhWDiNHqmrw==","length":1251,"stub":true}},"_etag":"\"O1CXDYKRDS7TUB7KC04I3G6L\""}