{"name":"nak","version":"0.2.12","description":"ack and ag inspired tool written in Node. Designed to be fast.","keywords":["ag","ack","grep","search"],"author":{"name":"Garen J. Torikian","email":"gjtorikian@gmail.com"},"contributors":[{"name":"Kevin Sawicki","email":"kevin@github.com"}],"dependencies":{"isbinaryfile":"","sigmund":"1.0.0","lru-cache":"2.2.2"},"devDependencies":{"uglify-js":"","exec-sync":"","mocha":""},"bin":{"nak":"./bin/nak"},"main":"./bin/nak","engines":{"node":">= 0.8.x"},"repository":{"type":"git","url":"http://github.com/gjtorikian/nak.git"},"scripts":{"test":"mocha tests/test_runner.js"},"readme":"[![Build Status](https://travis-ci.org/gjtorikian/nak.png)](https://travis-ci.org/gjtorikian/nak)\n\nAn `ack`/`ag` clone written in Node.js. The focus here is on speed and performance,\nrather than trying to 100% mimic all the functionality of `ack`.\n\nThere were two goals set out:\n\n1. Be faster than `ack`\n2. Return matches in order\n\nI've benchmarked in numerous places where\nand why code is written as it is, as well as possible areas of improvement. It's\nmostly asynchronous, though due to the requirement of returning items in order,\nperforms a mergesort at the end of all the results obtained.\n\nAs long as it's faster than `ack`, I'm pleased.\n\n# Behavior\n\nA lot of the functionality is modeled around `ag`. In fact, you can provide a _.nakignore_ file to define patterns to ignore. _.nakignore_ files in the directory you're searching under are automatically included as ignore rules, but you can choose to specify any additional file (with _.gitignore_-style rules) with `-a`.\n\nSome missing options include specifying a maxdepth, or following symlinks.\n\n# Usages\n\n`nak -G '*.js' 'function' .`\n\nFind all files ending in `js`, in the current directory, with the phrase `function`.\n\n`nak -a ../.gitignore -i 'def' .`\n\nFind all files in the current directory, with the phrase in `def` (case-insensitive), in the current directory; also, use the _.gitignore_ rules from the folder above\n\n`nak -d '*.less' -w 'mixin' .`\n\nFind all files in the current directory that are not `.less`, with the phrase `mixin` (whole word), in the current directory\n\n# Why?\n\nAfter reading Felix's [Faster than C](https://github.com/felixge/faster-than-c) notes, I became inspired to just write a **fast** `ack` clone, in Node.js.\n\nI benchmarked and rewrote and learned a lot. While `nak` does not support _everything_ `ack` does, it does nearly everything `ag` does.\n\n# Benchmarks\n\nYou like numbers? Me too. They're fun.\n\nHere's the average time for grabbing information from a directory with 13,300 files five times. The commands do the exact same thing by just listing all the available files in the directory structure, _and_ try to exclude the same files/directories.\n\n`ag`     | `nak`    | `ack`    | `find`\n---------|----------|----------|---------\n10.052s  | 4.863s   | 5.217s   | 28.989s\n\nHere are benchmarks for finding the phrase \"va\" in cloud9infra, as a whole-word regexp, case insensitively:\n\n`ag`     | `nak`    | `ack`     | `grep`\n---------|----------|-----------|---------\n34.609s  | 29.327s  | 88.883s   | 256.14s\n\nObviously, part of the speed impediment to `ack` or `grep` is the lack of a _simple_ way to provide ignore rules.\n\n# Testing\n\nAll tests can be found in _tests_; they use [`mocha`](http://visionmedia.github.com/mocha/) to run. To run them:\n\n```\nnpm install mocha -g\nnpm test\n```\n\n# Builds\n\nBuilding is necessary only if you want a minified version of nak, or, a version that works with [VFS-Local](https://github.com/c9/vfs-local).\n\nJust call `node compile.js` from the root directory to generate a build. You'll need to `npm install uglify-js` first.\n\nYou'll get several files: one is nak minifed, and the other is a minified version of nak that is suitable for use with VFS. The API and argument consumption for VFS local is the exact same; just make sure you call `api.execute` within the callback for `vfs.extend`.\n\n# Options\n\n```\nOptions:\n        -l|--list                         list files encountered\n        -H|--hidden                       search hidden files and directories (default off)\n        -c|--color                        adds color to results  (default off)\n        -a|--pathToNakignore «value»      path to an additional nakignore file\n        -q|--literal                      do not parse PATTERN as a regular expression; match it literally\n        -w|--wordRegexp                   only match whole words\n        -i|--ignoreCase                   match case insensitively\n        -G|--fileSearch «value»           comma-separated list of wildcard files to only search on\n        -d|--ignore «value»               comma-separated list of wildcard files to additionally ignore\n        -f|--follow                       follow symlinks (default off)\n        -U|--addVCSIgnores                include VCS ignore files (.gitignore); still uses .nakignore\n           --ackmate                      output results in a format parseable by AckMate\n```\n\n# Hotspots\n\nRight now there are two areas of the code that take the longest amount of time:\n\n* determining whether a file is binary or not (calls to `isBinaryFile` in _walkdir.js_)\n* assembling the final output in _finalizer_\n\nEverything else--from ignore rule creation to option parsing--takes an insignificant amount of time to process.\n\n# History\n\nFor a deeper discussion on this tool versus `ag`, `find`, and `grep`, see [this discussion](https://github.com/ajaxorg/cloud9/pull/2369) into Cloud9.\n\n# License\n\nCopyright (c) 2013 Garen Torikian\n\nMIT License\n","_id":"nak@0.2.12","dist":{"shasum":"afbf0ab75c942252c00095bf578d3cc77967883b","tarball":"http://registry.npmjs.org/nak/-/nak-0.2.12.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"gjtorikian","email":"gjtorikian@gmail.com"},"maintainers":[{"name":"gjtorikian","email":"gjtorikian@gmail.com"}],"directories":{},"_etag":"\"1DYR8WFO3XX88QS4JG6S660SL\""}