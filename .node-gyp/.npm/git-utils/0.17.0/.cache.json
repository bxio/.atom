{"name":"git-utils","description":"A package for using Git repositories","version":"0.17.0","licenses":[{"type":"MIT","url":"http://github.com/atom/node-git/raw/master/LICENSE.md"}],"author":{"name":"Kevin Sawicki","email":"kevin@github.com"},"contributors":[{"name":"Garen J. Torikian","email":"gjtorikian@gmail.com"}],"repository":{"type":"git","url":"https://github.com/atom/node-git.git"},"bugs":{"url":"https://github.com/atom/node-git/issues"},"keywords":["git","libgit2"],"main":"./lib/git.js","devDependencies":{"grunt":"~0.4.0","grunt-contrib-coffee":"~0.4.0","grunt-shell":"~0.2.1","coffee-script":"~1.6.1","grunt-cli":"~0.1.6","node-gyp":"~0.8.5","wrench":"~1.4.4","temp":"~0.5.0","underscore":"~1.4.4","jasmine-focused":"~0.1.0"},"dependencies":{"bindings":"~1.0.0"},"scripts":{"prepublish":"grunt coffee","test":"jasmine-focused --captureExceptions --coffee spec/","install":"node-gyp rebuild"},"gypfile":true,"readme":"# Git Node module [![Build Status](https://travis-ci.org/atom/node-git.png)](https://travis-ci.org/atom/node-git)\n\nHelpers for working with Git repositories built natively on top of\n[libgit2](http://libgit2.github.com).\n\nThis module requires [CMake](http://www.cmake.org/) for building libgit2 and it\nis a prerequisite for both installing this module and building it locally.\n\n## Installing\n\n```sh\nnpm install git-utils\n```\n\n## Building\n  * Clone the repository with the `--recurse` option to get the libgit2\n    submodule\n  * Install [CMake](http://www.cmake.org/)\n  * Run `npm install`\n  * Run `grunt` to compile the native and CoffeeScript code\n  * Run `grunt test` to run the specs\n\n## Docs\n\n### git.open(path)\n\nOpen the repository at the given path.  This will return `null` if the\nrepository at the given path does not exist or cannot be opened.\n\n```coffeescript\ngit = require 'git-utils'\n\nrepository = git.open('/Users/me/repos/node')\n```\n\n### Repository.checkoutHead(path)\n\nRestore the contents of a path in the working directory and index to the\nversion at HEAD. Similar to running `git reset HEAD -- <path>` and then a\n`git checkout HEAD -- <path>`.\n\n`path` - The string repository-relative path to checkout.\n\nReturns `true` if the checkout was successful, `false` otherwise\n\n### Repository.getAheadBehindCount()\n\nGet the number of commits the HEAD branch is ahead/behind the remote branch it\nis tracking.  Similar to the commit numbers reported by `git status` when a\nremote tracking branch exists.\n\nReturns an object with `ahead` and `behind` keys pointing to integer values\nthat will always be >= 0.\n\n### Repository.getCommitCount(fromCommit, toCommit)\n\nGet the number of commits between `fromCommit` and `toCommit`.\n\n`fromCommit` - The string commit SHA-1 to start the rev walk at.\n\n`toCommit` - The string commit SHA-1 to end the rev walk at.\n\nReturns the number of commits between the two, always >= 0.\n\n### Repository.getConfigValue(key)\n\nGet the config value of the given key.\n\n`key` - The string key to retrieve the value for.\n\nReturns the configuration value, may be `null`.\n\n### Repository.getDiffStats(path)\n\nGet the number of lines added and removed comparing the working directory\ncontents of the given path to the HEAD version of the given path.\n\n`path` - The string repository-relative path to diff.\n\nReturns an object with `added` and `deleted` keys pointing to integer values\nthat always be >= 0.\n\n### Repository.getHeadBlob(path)\n\nGet the blob contents of the given path at HEAD. Similar to\n`git show HEAD:<path>`.\n\n`path` - The string repository-relative path.\n\nReturns the string contents of the HEAD version of the path.\n\n### Repository.getHead()\n\nGet the reference or SHA-1 that HEAD points to such as `refs/heads/master`\nor a full SHA-1 if the repository is in a detached HEAD state.\n\nReturns the string reference name or SHA-1.\n\n### Repository.getLineDiffs(path, text)\n\nGet the line diffs comparing the HEAD version of the given path and the given\ntext.\n\n`path` - The string repository-relative path.\n\n`text` - The string text to diff the HEAD contents of the path against.\n\nReturns an array of objects that have `oldStart`, `oldLines`, `newStart`, and\n`newLines` keys pointing to integer values, may be `null` if the diff fails.\n\n### Repository.getMergeBase(commit1, commit2)\n\nGet the merge base of two commits.\n\n`commit1` - The string SHA-1 of the first commit.\n\n`commit2` - The string SHA-1 of the second commit.\n\nReturns the string SHA-1 of the merge base of `commit1` and `commit2` or `null`\nif there isn't one.\n\n### Repository.getPath()\n\nGet the path of the repository.\n\nReturns the string absolute path of the opened repository.\n\n### Repository.getReferenceTarget(ref)\n\nGet the target of the given reference.\n\n`ref` - The string reference.\n\nReturns the string target of the given reference.\n\n### Repository.getShortHead()\n\nGet a possibly shortened version of value returns by `getHead()`. This will\nremove leading segments of `refs/heads`, `refs/tags`, or `refs/remotes` and will\nalso shorten the SHA-1 of a detached HEAD to 7 characters.\n\nReturns a string shortened reference name or SHA-1.\n\n### Repository.getStatus([path])\n\nGet the status of a single path or all paths in the repository.  This will not\ninclude ignored paths.\n\n`path` - An optional repository-relative path to limit the status reporting to.\n\nReturns an integer status number if a path is specified and returns an object\nwith path keys and integer status values if no path is specified.\n\n### Repository.getUpstreamBranch([branch])\n\nGet the upstream branch of the given branch.\n\n`branch` - The branch to find the upstream branch of (default: `HEAD`)\n\nReturns the string upstream branch reference name.\n\n### Repository.getWorkingDirectory()\n\nGet the working directory of the repository.\n\nReturns the string absolute path to the repository's working directory.\n\n### Repository.isIgnored(path)\n\nGet the ignored status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is ignored, `false` otherwise.\n\n### Repository.isPathModified(path)\n\nGet the modified status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is modified, `false` otherwise.\n\n### Repository.isPathNew(path)\n\nGet the new status of a given path.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is new, `false` otherwise.\n\n### Repository.isStatusModified(status)\n\nCheck if a status value represents a modified path.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a modified one, `false` otherwise.\n\n### Repository.isStatusNew(status)\n\nCheck if a status value represents a new path.\n\n`status` - The integer status value.\n\nReturns `true` if the status is a new one, `false` otherwise\n\n### Repository.isSubmodule(path)\n\nCheck if the path is a submodule in the index.\n\n`path` - The string repository-relative path.\n\nReturns `true` if the path is a submodule, `false` otherwise.\n\n### Repository.refreshIndex()\n\nReread the index to update any values that have changed since the last time the\nindex was read.\n\n### Repository.relativize(path)\n\nRelativize the given path to the repository's working directory.\n\n`path` - The string path to relativize.\n\nReturns a repository-relative path if the given path is prefixed with the\nrepository's working directory path.\n\n### Repository.release()\n\nRelease the repository and close all file handles it has open.  No other methods\ncan be called on the `Repository` object once it has been released.\n","readmeFilename":"README.md","_id":"git-utils@0.17.0","dist":{"shasum":"68997225a2518b5da244da3cbe8cf72fc35b3537","tarball":"http://registry.npmjs.org/git-utils/-/git-utils-0.17.0.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"kevinsawicki","email":"kevinsawicki@gmail.com"},"maintainers":[{"name":"kevinsawicki","email":"kevinsawicki@gmail.com"}],"directories":{},"_etag":"\"DCJAATPZXHK3O6FN3MO8UC02R\""}